# -*- coding: utf-8 -*-
"""Timetable schedualing greedy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R2GaFC8Rmy85BjbjlH-Jp6UqdVjWhEfZ
"""

import json
import random
import pprint
import math

def load():
  file = open("ulaz1.txt", "r")
  file_content = file.read()

  tmp = json.loads(file_content)
  ucionice_dict = tmp["Ucionice"]
  casovi = tmp["Casovi"]

  dani = ["PON", "UTO", "SRE", "CET", "PET"]
  predmeti_set = set() # {"Bezbednost mreza", "Data centar infrastruktura"...}
  nastavnici_set = set() # {"babic Djordje", "Bojovic Petar"...}
  grupe_set = set()
  nastavnici = []
  predmeti = []
  grupe = []
  ucionice = [] # Niz ucionica ["Atelje", "Kolarac", "U1"..."Studio"]

  for u in ucionice_dict:
      tmp = ucionice_dict[u]
      for x in tmp:
        ucionice.append(x)

  # Dodajemo id svakom casu, 0, 1, 2...len(casovi)
  # Dodajemo zapravo ucionice "Ucionica" = ["U1", "U2"]
  id = 0
  for cas in casovi:
    cas["Ucionica"] = ucionice_dict[cas["Ucionica"]]
    predmeti_set.add(cas["Predmet"])
    nastavnici_set.add(cas["Nastavnik"])
    for g in cas["Grupe"]:
      grupe_set.add(g)
    cas["ID"] = id
    id += 1

  # Prebacim nastavnike i predmete u listu  
  for nastavnik in nastavnici_set:
    nastavnici.append(nastavnik)

  for predmet in predmeti_set:
    predmeti.append(predmet)

  for grupa in grupe_set:
    grupe.append(grupa)  

  zauzeti_nastavnici = [(-1, -1) for _ in range(len(nastavnici))]
  zauzete_grupe = [(-1,-1) for _ in range(len(grupe))]
  raspored =[[-1 for _ in range(len(ucionice))] for i in range(60)]
  generisani_raspored = []
  tmp_casovi = [-1 for _ in casovi]

def nadji_moguce_termine(ucionica, sat):
  moguci_termini = []
  konacni_termini = []
  for cas in casovi:
    for u in cas["Ucionica"]:
      if(ucionica == u):
        if(sat//12 == (sat + int(cas["Trajanje"])) // 12 or sat == 0):
          if(zauzeti_nastavnici[nastavnici.index(cas["Nastavnik"])][1] < sat or
             sat + int(cas["Trajanje"]) < zauzeti_nastavnici[nastavnici.index(cas["Nastavnik"])][0]):
              moguci_termini.append(cas)

  flag = True
  for cas in moguci_termini:
    for g in cas["Grupe"]:
      if(zauzete_grupe[grupe.index(g)][1] > sat and
         sat + int(cas["Trajanje"]) > zauzete_grupe[grupe.index(g)][0]):
        flag = False
      elif(zauzete_grupe[grupe.index(g)][0] == sat and zauzete_grupe[grupe.index(g)][1] == sat + int(cas["Trajanje"])):
        flag = False
    if flag == True:
      konacni_termini.append(cas)
        
  return konacni_termini

while(1):
  load()
  while len(casovi) != 0:
    print("Ostalo jos ", len(casovi), " casova..")
    for i in range(60):
      for j in range(len(ucionice)):
        if(raspored[i][j] == -1): # Prazna ucionica
          moguci_casovi = nadji_moguce_termine(ucionice[j],i)
          if len(moguci_casovi) != 0:
            index = random.randrange(0, len(moguci_casovi))
            izabrani_termin = moguci_casovi[index]

            trajanje = int(izabrani_termin["Trajanje"])
            zauzeti_nastavnici[nastavnici.index(izabrani_termin["Nastavnik"])] = (i, i + trajanje) 
            for g in izabrani_termin["Grupe"]:
              zauzete_grupe[grupe.index(g)] = (i, i + trajanje)
            for t in range(trajanje):
              raspored[i + t][j] = int(izabrani_termin["ID"])

            izabrani_termin["Zadata ucionica"] = str(ucionice[j])
            izabrani_termin["Vreme pocetka"] = str(i + 9 - 13*(i//12))
            izabrani_termin["Dan"] = str(dani[i//12])
            generisani_raspored.append(izabrani_termin)
            casovi.remove(izabrani_termin)
            tmp_casovi[int(izabrani_termin["ID"])] = izabrani_termin

  print("Ostalo jos ", len(casovi), " casova..")
  broj_konflikta = proveri_preklapanja(raspored)
  if(broj_konflikta == 0):
    break
  
  
#print("Ima ", proveri_preklapanja(raspored), " konflikta")
#pprint.pprint(raspored)
print(generisani_raspored)

def proveri_preklapanja(raspored):
  checked = []
  preklapanja = 0
  for i in range(60):
    for j in range(len(ucionice)):
      
      index = raspored[i][j]
      
      if(index != -1 and index not in checked): 
        
        checked.append(index)
        tmp_grupe = set(tmp_casovi[index]["Grupe"])
        
        submatrix = raspored[i:min(i + int(tmp_casovi[index]["Trajanje"]), 59)][:]
        sub_checked = []

        for m in range(len(submatrix)):
          for n in range(len(submatrix[0])):
            
            if(submatrix[m][n] != -1):
              poredi_sa = submatrix[m][n]
              if poredi_sa not in sub_checked and poredi_sa not in checked:
                sub_checked.append(poredi_sa)
                poredi_grupe = set(tmp_casovi[poredi_sa]["Grupe"])
                presek = tmp_grupe.intersection(poredi_grupe)
                preklapanja += len(presek)
                
                if len(presek) != 0:
                  print("----Grupa----")
                  print(tmp_casovi[index])
                  print(tmp_casovi[poredi_sa])
                  print(tmp_casovi[index]["ID"], tmp_casovi[poredi_sa]["ID"])
                  pprint.pprint(submatrix)
                if tmp_casovi[index]["Nastavnik"] == tmp_casovi[poredi_sa]["Nastavnik"]:
                  preklapanja += 1
                  print("-----Profesor----")
                  print(tmp_casovi[index])
                  print(tmp_casovi[poredi_sa])
                  print(tmp_casovi[index]["ID"], tmp_casovi[poredi_sa]["ID"])
                  pprint.pprint(submatrix)
                
                
  return preklapanja